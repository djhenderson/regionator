#summary Swiss Transit Region sample

= Introduction =

This describes the details of the Swiss Transit Region sample.

This dataset includes information for 15,000 transit stations and 18,000 connections
between them.  This amount of data is too large to show all at once for
several reasons.  First, showing 15,000 icons and 18,000 lines looks too cluttered.
Second, a single KML file of 15,000 points and 18,000 lines is about 10MB
which is too large to either e-mail or host on a website.  Third, a 10MB KML file
takes too much time to parse and displaying 15,000 icons and labels does not
perform well.

Here is a [http://regionator.googlecode.com/svn/trunk/ch-sbb/flat.jpg screenshot]
of how this dataset looks as one flat KML file.

This describes how the Region-based !NetworkLink (RbNL) is used to present this
dataset in a manner that is both visually appealling and useful and which
addresses data size and performance concerns.

= Swiss Transit: Input data =

The input is from these CSV files:

  * [http://regionator.googlecode.com/svn/trunk/ch-sbb/ch-stations.csv ch-stations.csv] - 15,000 entries:
    * weight - number of daily connections
    * station name
    * location - latitude, longitude
  * [http://regionator.googlecode.com/svn/trunk/ch-sbb/ch-connections.csv ch-connections.csv] - 18,000 entries:
    * from station
    * to station
    * number of daily connections between the two

= Swiss Transit: Output =

The ch-sbb.kml file points to:

  * 3 Region-based !NetworkLink hierarchies
    * Basic - one simple Placemark per station
    * Styled - one styled Placemark per station
    * Multi - one !MultiGeometry Placemark per station:
      * Point - icon for station location
      * !LineString - one !LineString to each connecting station
  * a Folder to tour part of the dataset
  * debugging info:
    * Boxes - !LineString boxes showing the Region hierarchy
    * Dash - !ScreenOverlays showing the Region hierarchy

Subsequent sections details each item

= User experience =

Enable one of the Basic, Styled or Multi items and roam around Switzerland
and watch the station icons pop in as your viewpoint nears and
how stations of lesser importance pop out as the viewpoint moves away.
Play the Tour folder to see the effect also at various angles of tilt
and heading.  Note also that the icons pop in and out while the
viewpoint is in motion.

== Basic experience ==

As compared to the [http://regionator.googlecode.com/svn/trunk/ch-sbb/flat.jpg full onslaught]
of icons on labels this treament is already profoundly better.  From far away
the most important stations are shown.  Note that with regions "far away" is
a combination of altitude, heading, tilt and terrain.  This behavior generally
mimics the user experience of the "built in" populated places layer, for example.

== Styled experience ==

The experience of level of detail is the same as with Basic, but here the icons
are replaced with white paddles.  Also note that the anchor point ("hotspot") of the icon is
at the tail of the paddle (view in an oblique angle and change the heading
and watch the paddle "stand up" and "twirl" properly).

Mouse over an icon and it flips to a red star paddle and the station name
is revealed in a random-color blue-green text.  Click the icon for the balloon
and see that it is now styled with a blue-ish background and some custom formatting
with the driving directions removed.

Beyond the sub-styles and !StyleMap this also illustrates the utility of styleUrl
and global shared styles: all 15,000 Placemarks refer to a single shared style
in a separate KML file which can be replaced without regenerating the overall
dataset.  Without shared styles the style would have to be included with every
placemark which would increase the amount of data to fetch over the network,
it would increase the time to parse after fetch and would use up application-internal
resources to hold the parsed KML objects.

== Multi experience ==

This builds on the Styled sample to show the use of !StyleMap and !MultiGeometry
to hide and reveal geometry on icon rollover.  (Hide and reveal are just special
cases of color-based styling through the use of alpha.  Other datasets might
want to show a normal color/transparency and a highlight color transparency).

= Creating Basic, Styled and Multi =

The following sections describe how the 3 variations are created.

The Python class and function names come from the Regionator code base.
For example, kml.featureset.!FeatureSet() info is found using "pydoc kml.featureset.!FeatureSet".
The Python code can be viewed directly
at: http://regionator.googlecode.com/svn/trunk/kml/featureset.py.

= Basic Region-based NetworkLink hierarchy =

The Basic sample is created using the standard csvregionator.py
as follows:

{{{
csvregionator.py ch-stations.csv ch-basic-root.kml ch-basic-dir
}}}

The general form of csvregionator.py is:

{{{
usage: csvregionator.py input.csv root.kml dir [styleUrl]
}}}

Note that this basic sample does not use the optional styleUrl argument.
There is more about styling in the Styled section that follows which builds
on the material here in the Basic section.

== Input CSV data ==

The input.csv file of the station point data is used to create a
Region-based !NetworkLink hierarchy stored to ch-basic-dir
with a "root" file pointing to the top of the hierachy written
out to ch-basic-root.kml.

Each line of the input.csv is as follows:

{{{
score|lat|lon|name|description
}}}

In this case the score is the total number of connections with
the given station.  For example:

{{{
41|46.6245|9.57563|Salouf, posta|41 connections
}}}

See kml.csvregionator.!ParseCsvLine() for details.

== Station Placemark ==

A Point Placemark is created for each station from each
line in the input.csv.  For example:

{{{
<Placemark id="pm0">
  <name>Salouf, posta</name>
  <description>41 connections</description>
  <Point>
    <coordinates>9.575630,46.624500</coordinates>
  </Point>
</Placemark>
}}}

See kml.csvregionator.!CreatePlacemark() for details.

== Parsing the input ==

The input CSV file is parsed into a "feature set" with the Placemark
for each station added by its weight (total number of connections
to other stations), latitude and longitude.

The feature set is sorted based on weight.  This sort is the main
determinant of which stations appear more prominently than others.

See kml.csvregionator.!CreateFeatureSet() for details.

== Regionating the feature set ==

A standard region sort of the feature set in this sample puts
at most 16 stations in one region whose visibility range
at the mininum end is 256 pixels.

Thus, the 16 most important stations first appear when a bounding box
surrounding Switzerland occupies 256 ^ 2 pixels on the screen.

(The Switzerland view point in the Tour folder is this viewpoint).

The file ch-basic-dir/1.kml is KML for this top level node.
This file is excerpted here and follows the general form of
any KML file in a RbNL hierarchy:

{{{
<kml>
  <Document>
    <Region> [bounding box and lod for this file] </Region>
    <NetworkLink> [to NW child] </NetworkLink>
    <NetworkLink> [to NE child] </NetworkLink>
    <NetworkLink> [to SW child] </NetworkLink>
    <NetworkLink> [to SE child] </NetworkLink>
    Features...
  </Document>
</kml>
}}}

In the case of ch-basic-dir/1.kml the Region is this:

{{{
<Region>
  <Lod>
    <minLodPixels>256</minLodPixels>
    <maxLodPixels>-1</maxLodPixels>
  </Lod>
  <LatLonAltBox>
    <north>50.625</north>
    <south>45.0</south>
    <east>11.25</east>
    <west>5.625</west>
  </LatLonAltBox>
</Region>
}}}

This top-most node has 3 child nodes which present the NE,
SE, and SW quadrants of the top level region.  For example,
here is the Region for the SW child.  Note that the south and
west borders are the same and that the north and east borders
are half way between the north and south and east and west of
the parent region above.  Also, note that the Lod values are the same.
Since the children region is geographically smaller the viewpoint
must be closer to trigger both the !NetworkLink fetch and the visibility
of features associated with this Region:

{{{
<Region>
  <Lod>
    <minLodPixels>256</minLodPixels>
    <maxLodPixels>-1</maxLodPixels>
   </Lod>
  <LatLonAltBox>
    <north>47.8125</north>
    <south>45.0</south>
    <east>8.4375</east>
    <west>5.625</west>
  </LatLonAltBox>
</Region>
}}}

Finally the actual data is simply the Placemarks for the 16 most important stations.
Here is the most important station and hence the first Placemark in ch-basic-dir/1.kml:

{{{
<Placemark id="pm1942">
  <name>Zug, Postplatz</name>
  <description>4146 connections</description>
  <Point>
    <coordinates>8.515710,47.167900</coordinates>
  </Point>
</Placemark>
}}}

See the KML 2.1
[http://code.google.com/apis/kml/documentation/kml_21tutorial.html#nestingregions tutorial]
for details on nesting Regions with !NetworkLinks.

= Styled Region-based NetworkLink hierarchy =

This describes how the Styled RbNL hierarchy is created.

As with the Basic sample this RbNL hierarchy is created
using the csvregionator.py script using the ch-stations.csv
as input.  In addition the Styled sample uses the styleUrl argument:

{{{
csvregionator.py ch-stations.csv ch-style-root.kml ch-style-dir ../style/style.kml#station_icon
}}}

== Styled Station Placemark ==

Here is an example Placemark created by cvsregionator.py:

{{{
<Placemark id="pm1942">
  <name>Zug, Postplatz</name>
  <description>4146 connections</description>
  <styleUrl>../style/style.kml#station_icon</styleUrl>
  <Point>
    <coordinates>8.515710,47.167900</coordinates>
  </Point>
</Placemark>
}}}

This is the same as the Basic Station Placemark with the addition of this line:

{{{
  <styleUrl>../style/style.kml#station_icon</styleUrl>
}}}

The RbNL hierarchy is otherwise created in the same manner as
in the Basic sample.

== Shared Style referencing ==

The Styled sample RbNL files are stored to the ch-styled-dir.
The style.kml file is in the peer directory style.  Hence, relative
URL referencing finds style/style.kml and the fragment 'station_icon'
references the id of a global style in style.kml.

=== Custom icon ===

Here is a simple style.kml with a global Style which provides a custom icon.

{{{
<kml xmlns="http://earth.google.com/kml/2.1">
<Document>
    <Style id="station_icon">
      <IconStyle>
        <Icon>
          <href>wht-blank.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
    </Style>
</Document>
</kml>
}}}

Since the href is relative the file wht-blank.png must reside in the
same directory as style.kml.
(Alternately the href could be a full absolute URL to any website
hosting an appropriate icon image file).

NOTE: Since style.kml is a separate file from the files in the RbNL
hierarchy it can be replaced without changing the RbNL hierarchy.
(The RbNL hierarchy must be reloaded in Google Earth for
the change to take effect).

=== Icon rollover ===

Here is a style.kml which defines icon rollover behavior.
Note that the StyleMap element here is the target of the styleUrl
given its use of the station_icon id:

{{{
<kml xmlns="http://earth.google.com/kml/2.1">
  <Document>

    <Style id="station_icon_normal">
      <IconStyle>
        <Icon>
          <href>wht-blank.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
    </Style>

    <Style id="station_icon_highlight">
      <IconStyle>
        <Icon>
          <href>red-stars.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
    </Style>

    <StyleMap id="station_icon">
      <Pair>
        <key>normal</key>
        <styleUrl>#station_icon_normal</styleUrl>
      </Pair>
      <Pair>
        <key>highlight</key>
        <styleUrl>#station_icon_highlight</styleUrl>
      </Pair>
    </StyleMap>

  </Document>
</kml>
}}}

=== Hide and reveal text and balloon styling ===

Here is a richer style building on the previous which in addition
adds a label style which hides the Placemark
name normally and reveals it on highlight.  The name text is colored randomly
within a range of blue-green colors.  In addition the ballon is styled
to provide a background and to remove the driving directions.

{{{
<kml xmlns="http://earth.google.com/kml/2.1">
<Document>

    <Style id="station_icon_normal">
      <IconStyle>
        <Icon>
          <href>wht-blank.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
      <LabelStyle>  <!-- 0 scale hides text -->
        <scale>0</scale>
      </LabelStyle>
    </Style>

   <Style id="station_icon_highlight">
      <IconStyle>
        <Icon>
          <href>red-stars.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
      <!-- default LabelStyle is visible -->
      <BalloonStyle>
        <bgColor>ffffbb8b</bgColor>
        <text>  <!-- This is a balloon template. -->
<![CDATA[
The station is <b>$[name]</b><br/>
there are $[description].
]]>
        </text>
      </BalloonStyle>
    </Style>

    <StyleMap id="station_icon">
      <Pair>
        <key>normal</key>
        <styleUrl>#station_icon_normal</styleUrl>
      </Pair>
      <Pair>
        <key>highlight</key>
        <styleUrl>#station_icon_highlight</styleUrl>
      </Pair>
    </StyleMap>

  </Document>
</kml>
}}}

This latter file is one used by default in the script
than creates all the samples.

= MultiGeometry Region-based NetworkLink hierarchy =

This describes how the Multi RbNL hierarchy is created.

The Multi sample builds on the Styled sample.  The additional feature
is to provide geometry revealed on icon rollover.  This section
describes this additional feature.

== Multi Styled Station Placemark ==

As the name suggests each Placemark in the Multi RbNL is a
!MultiGeometry Placemark.  The !MultiGeometry element includes
the Point as used in both the Basic and Styled Placemark, and
in addition includes 0 or more !LineStrings -- one for each
connection.  Each !LineString goes from the same location
as the Point to the location of the connecting station.

Here is an example:

{{{
<Placemark>
  <name>Zug, Postplatz</name>
  <description>4146 connections</description>
  <styleUrl>../style/poly.kml#station_icon</styleUrl>
  <MultiGeometry>
    <Point>
      <coordinates>8.515710,47.167900</coordinates>
    </Point>
    <LineString>
      <tessellate>1</tessellate>
        <coordinates>8.515710,47.167900 8.528370,47.167700</coordinates>
    </LineString>
    <LineString>
      <tessellate>1</tessellate>
      <coordinates>8.515710,47.167900 8.514170,47.163600</coordinates>
    </LineString>
</Placemark>
}}}

(Note: the actual Placemark for this station includes 12 LineStings).

== regionator-multi.py ==

The Multi RbNL sample uses custom program
[http://regionator.googlecode.com/svn/trunk/ch-sbb/regionator-multi.py regionator-multi.py]
to generate the Placemarks.

The input to this program is both the station point data CSV file (ch-stations.csv)
and an additional file listing connections per station (ch-connections.csv).

See !CreatePlacemark() in regionator-multi.py.

A featureset is created with all station !MultiGeometry Placemarks which
is passed to the standard feature set regionator kml.featuresetRegionate()
(used ultimately also by the csvregionator.py used in the Basic and Styled samples).

== Multi Style ==

As with the Styled sample a styleUrl is used with each Placemark
to reference a shared style.

Use of !MultiGeometry provides the means to change the styling of
any geometry in the Placemark on rollover.  In this case the rollover
action has the visual effect of revealing the normally hidden lines.

Here is the style/poly.kml file referenced
in the styleUrl of each Placemark in the Multi sample:

{{{
<kml xmlns="http://earth.google.com/kml/2.1">
<Document>

    <Style id="station_icon_normal">
      <IconStyle>
        <Icon>
          <href>wht-blank.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
      <LabelStyle>  <!-- This hides the label -->
        <scale>0</scale>
      </LabelStyle>
      <LineStyle>  <!-- This hides all lines -->
        <color>00000000</color>
        <!-- a==00: fully transparent line -->
      </LineStyle>
    </Style>

    <Style id="station_icon_highlight">
      <IconStyle>
        <Icon>
          <href>red-stars.png</href>
        </Icon>
        <hotSpot x=".5" y="0" xunits="fraction" yunits="fraction"/>
      </IconStyle>
      <!-- This shows the label in a random blue-green color -->
      <LabelStyle>
        <color>ff90c010</color>
        <colorMode>random</colorMode>
      </LabelStyle>
      <!-- Line are drawn 2 pixels wide red -->
      <LineStyle>
        <color>ff3f00ff</color>
        <width>2</width>
      </LineStyle>
      <BalloonStyle>
        <bgColor>ffffbb8b</bgColor>
        <text>
<![CDATA[
The station is <b>$[name]</b><br/>
there are $[description].
]]>
        </text>
      </BalloonStyle>
    </Style>

    <StyleMap id="station_icon">
      <Pair>
        <key>normal</key>
        <styleUrl>#station_icon_normal</styleUrl>
      </Pair>
      <Pair>
        <key>highlight</key>
        <styleUrl>#station_icon_highlight</styleUrl>
      </Pair>
    </StyleMap>

</kml>
}}}

= Debug info =

This describes the Boxes and Dash debugging information for this dataset
and how these are created.

Any regionator instance maintains a list of all the regions for a given dataset.
See kml.regionator.!QidList().

== Boxes ==

The kml.qidboxes.!MakeQidBoxes() function uses this list to build a single flat
KML file of one !LineString box outlining each Region.  The !LineString is put
in a Placemark which itself is given that same Region.  Hence, the "region" is
drawn.  (NOTE:  The !LineString lines follow great circle paths while Region
edges follow lines of constant latitude so the boxes are not exact.  The corners,
however, are matched.

== Dash ==

The kml.dashboard.!MakeDashBoard() function finds the qid list in a
regoinator instance (kml.regionator.!QidList()) and builds a single flat KML
file of one !ScreenOverlay for each Region (down to a maximum of 6 levels).

The geo-graphically larger regions are drawn larger and bluer.  The geo-graphically
smaller and more deeply nested regions are drawn smaller and redder.

The top of the "dashboard" is north and left is east.

Move the viewpoint up and down, change the heading and tilt and change
the location, and enable and disable terrain and watch how the various
regions pop in and out.  Note that as the viewpoint moves more deeply into
the dataset that both finer grain regions are activated and coarser
level regions are de-activated.  This manages the complexity of the dataset
both visually and with respect to from a network load
and applications performance.

Note that a !ScreenOverlay with no Icon results in a solid polygon
whose color is taken from the color element.







